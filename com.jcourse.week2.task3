package com.jcourse.week2.task3;

public class ArraySort {

	public static void main(String[] args) {
		int[] array = {1, 10, 0};
		int length = array.length;
		
		for (int i = array.length - 1; i >= 1; i--) {
		    /* В переменной sorted мы будем хранить признак того,
		     * отсортирован ли массив. Перед каждым проходом внутреннего
		     * цкла будем предполагать, что отсортирован, но если совершим
		     * хоть одну перестановку, то значит ещё не конца отсортирован.
		     * Этот приём, упрощающий сортировку, называется критерием Айверсона.
		     */
		    boolean sorted = true;
		    /* Во внутреннем цикле мы проходимся по фрагменту массива, который
		     * определяется внешним циклом. В этом фрагменте мы устанавливаем
		     * правильный порядок между соседними элементами, так попарно
		     * обрабатывая весь фрагмент.
		     */
		    for (int j = 0; j < i; j++) {
		        /* Если порядок соседних элементов не правильный, то их
		         * надо обменять местами. И запомнить, что была перестановка.
		         */
		        if (array[j] > array[j+1]) {
		            int c = array[j];
		            array[j] = array[j+1];
		            array[j+1] = c;
		            sorted = false;
		        }
		    }
		    /* Если массив отсортирован (т.е. не было ни одной перестановки
		     * во внутреннем цикле, значит можно прекращать работу внешнего
		     * цикла.
		     */
		    if(sorted) {
		        break;
		    }
		}
		for (int i = 0; i < length; i++) {
			System.out.print(array[i] + " ");
		}

	}

}
